name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

concurrency: ci-${{ github.event_name	}}-${{ github.ref }}

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    name: Build frontend
    defaults:
      run:
        shell: bash
        working-directory: frontend
    env:
      IMAGE_NAME: registry.gitlab.com/6uliver/piac/frontend:${{ github.sha }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('frontend/yarn.lock') }}

      - name: Install dependencies
        run: yarn

      - name: Run Prettier
        run: npx prettier --check .

      - name: Run Tests
        run: yarn test

      - name: Publish unit test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: Unit test results - frontend
          files: frontend/junit.xml

      - name: Login to GitLab
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t $IMAGE_NAME

      - name: Push Docker image
        run: docker push $IMAGE_NAME

  build-backend:
    name: Build backend
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    services:
      db:
        image: bitnami/mysql:8.0
        ports: ["3306:3306"]
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: piac-test
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        options: >-
          --health-cmd="mysqladmin ping" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=3
    env:
      IMAGE_NAME: registry.gitlab.com/6uliver/piac/backend:${{ github.sha }}
      MYSQL_URL: jdbc:mysql://db:3306/piac-test
      spring.datasource.password: test
    steps:
      - uses: actions/checkout@v2

      - name: Verify MySQL connection from host
        run: |
          sudo apt-get install -y mysql-client
          mysql --host 127.0.0.1 -uroot -ptest -e "SELECT 1";

      - name: Run tests
        run: mvn test

      - name: Login to GitLab
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t $IMAGE_NAME

      - name: Push Docker image
        run: docker push $IMAGE_NAME

  build-admin:
    name: Build admin
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: admin
    env:
      IMAGE_NAME: registry.gitlab.com/6uliver/piac/admin:${{ github.sha }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: admin/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('admin/yarn.lock') }}

      - name: Install dependencies
        run: yarn

      - name: Run Prettier
        run: npx prettier --check .

      - name: Login to GitLab
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t $IMAGE_NAME

      - name: Push Docker image
        run: docker push $IMAGE_NAME

  test-frontend:
    name: Run site tests
    runs-on: ubuntu-latest
    needs: [build-frontend]
    defaults:
      run:
        shell: bash
        working-directory: frontend
    env:
      CYPRESS_BASE_URL: http://site
    services:
      site:
        image: registry.gitlab.com/6uliver/piac/frontend:${{ github.sha }}
        ports: ["80:80"]
        credentials:
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_PASSWORD }}
    container:
      image: cypress/included:9.1.0
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('frontend/yarn.lock') }}

      - name: Install dependencies
        run: yarn

      - name: Run Cypress tests
        run: yarn e2e-test:run

      - name: Publish Cypress test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: Cypress test results - frontend
          files: frontend/results/**/*.xml

      - name: Archive video
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: videos
          path: frontend/cypress/videos

      - name: Archive screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: screenshots
          path: frontend/cypress/screenshots

  test-admin:
    name: Run admin tests
    runs-on: ubuntu-latest
    needs: [build-admin]
    defaults:
      run:
        shell: bash
        working-directory: admin
    env:
      CYPRESS_BASE_URL: http://admin
    services:
      admin:
        image: registry.gitlab.com/6uliver/piac/admin:${{ github.sha }}
        ports: ["80:80"]
        credentials:
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_PASSWORD }}
    container:
      image: cypress/included:9.1.0
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: admin/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('admin/yarn.lock') }}

      - name: Install dependencies
        run: yarn

      - name: Run Cypress tests
        run: yarn e2e-test:run

      - name: Publish Cypress test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: Cypress test results - admin
          files: admin/results/**/*.xml

      - name: Archive video
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: videos
          path: admin/cypress/videos

      - name: Archive screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: screenshots
          path: admin/cypress/screenshots

  deploy-staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    environment: stage
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs:
      [build-frontend, build-backend, build-admin, test-frontend, test-admin]
    steps:
      - name: Deploy backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/felpenzzel
            ./deploy.sh stage ${{ github.sha }}

  deploy-live:
    name: Deploy to live
    runs-on: ubuntu-latest
    environment: live
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs:
      [build-frontend, build-backend, build-admin, test-frontend, test-admin]
    steps:
      - name: Deploy backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/felpenzzel
            ./deploy.sh live ${{ github.sha }}
